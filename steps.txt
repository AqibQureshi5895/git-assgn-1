
1.create a folder on local repository and a repository on GitHub.

2. Initialise folder on your local repository using 
    -$ git init

3. To connect to the github account follow the steps
    -$ git config --global user.email "aqib.qureshi@neosoftmail.com"
    -$ git config --global user.name "aqibqureshi"

4. Connect to the remote repository
    -$ git remote add origin https://github.com/AqibQureshi5895/git-assgn-1.git 

5. Create a file steps.txt 
    -$ touch steps.txt

6. check status 
    -$ git status

7. add file into staging area 
    -$ git add . //here dots every change

8. check status 
    -$ git status

9. Commit the file
    -$ git commit -m "initial commit" 

10. Push it to remote repository
    -$ git push -u origin master

// branch dev

11. create a new branch dev
    -$ git checkout -b dev

12. Check branch
    -$ git branch

13. create a file dev.txt and modifiy/add some text to it
    -$ touch dev.txt
    -$ notepad dev.txt


14. check status 
    -$ git status

15. add dev.txt into staging area 
    -$ git add . //here dots every change

16. check status 
    -$ git status

17.  Commit the file in dev branch
    -$ git commit -m "file updated and committed by dev branch" 

18. Push it to remote repository from dev branch
    -$ git push -u origin dev

19. check log
    -$ git log

// branch test

20. create a new branch test
    -$ git checkout -b test

21. Check branch
    -$ git branch

22. create a 2 files test-1.txt test-2.txt
    -$ touch test-1.txt
    -$ touch test-2.txt

23. check status 
    -$ git status

24. add dev.txt into staging area 
    -$ git add . //here dots every change

25. check status 
    -$ git status

26.  Commit the file in dev branch
    -$ git commit -m "file updated and committed by test branch" 

27. Push it to remote repository from dev branch
    -$ git push -u origin test

28. check log
    -$ git log

// Go to master branch
29. Switch to master branch
    -$ git checkout master

30. check log
    -$ git log
    // no output of file commited in different branches

30. check difference in branch w.r.t master
    -$ git branch dev
    -$ git branch test

31. Start merge
    -$ git merge dev
    -$ git merge test

32. check log
    -$ git log
    //   file commited in different branches is shown now

33. push the merge to local repository
    $ git push --set-upstream origin master

-- the files have been successfully merged now